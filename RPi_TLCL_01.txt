July 5, 2019

Ch 18 - Local security principles

https://courses.edx.org/courses/course-v1:LinuxFoundationX+LFS101x+3T2018/courseware/3648d529d85140d0aa590fe9b2af8de6/d4e697c69e324989b8e5a5ba7a533408/?child=first

https://courses.edx.org/courses/course-v1:LinuxFoundationX+LFS101x+3T2018/course/#block-v1:LinuxFoundationX+LFS101x+3T2018+type@sequential+block@36160c7d1ec74e9abe4c4af5c53df369


update-alternatives
    sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 10


                             ***** THE LINUX COMMAND LINE *****

shell   - command line interpreter that provides the user interface for terminal windows

4 types of commands
    compiled apps     - binary executables
    scripts           - shell scripts or scripts from other interpreted languages
    shell built-in    - can only be used to display the output within a shell or script
    shell function    - scripts incorporated into the environment
    alias             - command built from other commands

POSIX   - Portable Operating System Interface
        - defines the APIs, shell and utilities found on standard Unix-like system
        - IEEE 1003

word        - sequence of chars
list        - sequence of one or more commands or pipelines
name        - word consisting only of alphanumeric chars and underscores
parameter   - an entity that stores values
    variable    - a parameter noted by name
    posistional parameters  - $1 ... $9, ${10}
    special parameters
        $$  - store the process ID of the current shell
        $@  -
        $#  - number of arguments
        $-  -
        $*  - all arguments
        $!  -
        $0  - script name (or shell being used)
        $?  - exit status
        $_  -

return status   0 = success     1 = failure     range from 0 -255       $?
    - programs signal different types of failure with different return values

compound commands
iteration   - loop over list of commands, delineated by keywords "do" and "done"
    - while, until, for, select
conditionals    - execute list of commands only if certain conditions are met
    - if, case

command groups  - grouped list of commands, sharing any external redirections and
                    whose return value is that of the list
subshell
    (list)      - evaluate commands in a subshell; separate environment and parameters
group command
    { list ; }   - evaluate commands in the current shell, sharing the shell's environment
                 - spaces are required

command substitution    - have a command act like a file
                        - executed in a subshell

process substitution


COMMAND -OPTIONS ARGUMENTS

compgen -c      - list available commands
type            - display what type of command, list contents of aliases and functions
which           - display the location of an executable (not other types of commands)
whereis         - display locations of command-related files
whatis          - display brief descriptions of commands/programs


remap CAPSLOCK to ESCAPE key    setxkbmap -option caps:escape

date        - print or set the system date and time
cal         - displays a calendar
df          - show disk space usage
free        - show memory usage stats
exit


virtual terminals               - Ctrl+Alt+ F1 -F6
switch between terminals        - Alt+ F1 - F6
return to graphical desktop     - Ctrl+Alt+F7

prompt customizations   - see Bash Prompt HOWTO at tldp.org
\[ ... \]           - used to encapsulate non-printable chars
ANSI escape code    - begins with octal 033 (the code generated by the ESC key),
                        followed by an optional char attr, followed by an instruction
    \033[0;32m

>   - the shell prompt contained in the PS2 shell variable
    - appears in multiline statements into the shell

bash keyboard shortcuts

Ctrl + C    - kills the current process
Ctrl + Z    - puts the current process into suspended background
Ctrl + D    - exit terminal session; EOL
Ctrl + L    - clear
Ctrl + J    - newline
Ctrl + R    - search history
Ctrl + S    - stop output to the screen
Ctrl + Q    - restart output to the screen


Ctrl + A    - go to beginning of the line
Ctrl + E    - go to end of the line

Ctrl + XX   - toggle between current cursor position and the start of the line

Alt + B     - back one word
Alt + D     - delete word after the cursor

Alt + .     - last argument of the prev command



file        - shows file type of the target

less
zless       - view compressed text files
ASCII       - American Standard Code for Info Interchange

globbing    - using wildcards
            - *, ?, [chars], [!chars], [[:class:]]
            - char classes
                - alnum
                - alpha
                - digit
                - lower
                - upper
cd
pwd

directory stack
    pushd       - adds dir to the stack as it changes the current dir
    popd        - removes specified dir from the stack and cd's to the removed dir
    dirs        - displays directory stack
    $DIRSTACK   - env variable

cp          - copy
mv          - move or rename
mkdir       - make dir
rm          - remove

ln          - hard link to a file
            - every file has single hard link that gives the file its name
            - the file must be on the same partition
    - files are made up of two parts
        - the data part containing the file content's
        - the name part that holds the file's name
    - hard links create additional name parts that all refer to the same data
    - each related hard link refers to the same inode

ln -s       - symbolic link to a file or dir
            - a text pointer to the referenced file or dir
            - assign with a relative pathname vs absolute to avoid breaking if moved

help    - displays usage info about Bash builtins and keywords
help COMMAND   - displays the documentation of shell builtins
--help  - displays the usage info for an executable

apropos - search man pages for SEARCHTERM
man     - displays formal documentation for commands
        - man 5 passwd      -> displays section 5 of the passwd man page
        - man -k            -> same function as the appropos command
info    - advanced manual system primarily for GNU programs
        - GNU Project's alternative to man pages
        - info pages are hyperlinked
        - info coreutils
alias   - custom command or sequence of commands
        - alias name='string'
unalias - remove an alias
\ALIAS  - ignore alias if it's the same as another command




                                  ***** REDIRECTION *****

input redirection   - the process of reading input from a file
                    - uses the char <

output redirection  - the process of writing output to a file
                    - uses >, >>, or

file descriptors
        0>      - stdin
        1>      - stdout
        2>      - stderr
        2>&1    - redirect stderr to the same place as stdout
        1>&2    - redirect stdout to the same place as stderr

                - &> or &>>

cat     - reads a file to the stdout
sort    - sort lines of text files
uniq    - filter out or show duplicates   (-d -> show duplicates)
grep    - find text patterns within files
wc      - display the number of lines, words, and chars (bytes)
head    - display the first 10 lines of output
tail    - display the last 10 lines of output
tee     - read from stdin and then output to stdout and files
        - siphon off pipes's output to a file
echo    - used to display a line of text

types of shell expansion
    - pathname      -
    - tilde         -
    - arithmetic    - $((expression))
    - brace         -
    - parameter     - env variables
    - command substitution  - feed output of a command
            - command2 $(command1)
            - command2 `command1`   -> uses backquotes (stay away, they suck)

brace expansion
    echo {start..end..increment}

POSIX char classes  - used by the shell during pathname expansion
    [:alnum:]       - alphanumeric, [A-Za-Z0-9] in ASCII
    [:word:]        - same as alnum, with the addition of "_"
    [:alpha:]       - alphabetic, [A-Za-z] in ASCII
    [:blank:]       - includes space and tab chars
    [:cntrl:]       - ASCII control codes, ASCII chars 0-31 and 127
    [:digit:]       - the numbers 0-9
    [:graph:]       - the visible chars, ASCII chars 33-126
    [:lower:]       - lowercase letters
    [:punct:]       - punctuation chars, [-!"#$%&'()*+,./:;<=>?@[\\\]_`{|}~] in ASCII
    [:print:]       - printable chars, same as graph but also includes the space char
    [:space:]       - the whitespace chars (space, tab, carriage return, newline,
                        verical tab, and form feed.  [ \t\r\n\v\f] in ASCII
    [:upper:]       - uppercase letters
    [:xdigit:]      - chars used to express hexadecimal numbers, [0-9A-Fa-f] in ASCII

word-splitting  - removing extra white space from arguments
quoting         - use to prevent unwanted expansions
double quotes   - suppresses: word-splitting; pathname, tilde, & brace expansion
                - allows : command substitution; parameter & arithmetic expansion
    echo $(cal)
    echo "$(cal)"
single quotes   - suppresses all expansions
escape char     - selectively prevent as expansion

clear   - clear the screen
history - display command history list
    $HISTFILE       - location of the history file
    $HISTSIZE       - the number of lines or commands stored in memory is a history list
                        while the bash session is ongoing
    $HISTFILESIZE   - the number of commands that are allowed in the history file
                        at the start of a session and are stored in the history file
                        at the end of the bash session

    !$      - the last argument in a line
    !n      - refer to the nth command
    !string - most recent command starting with string



kill    - cut   - items are stored in the kill-ring
yank    - paste - yank text from the kill-ring

                                  ***** PERMISSIONS *****

id      - display user identity
chmod   - change the mode (permissions) of a file or directory
umask   - permissions to be removed from newly created files
su      - start a shell as another user
sudo    - execute a command as another user (usually superuser)
sudo -l     - display privileges granted by sudo
chown   - change the owner and group that a file belongs to
chgrp   - change the group ownership of a file
passwd  - change the password

file attributes
    file types
        -   regular file
        d   dir
        l   symbolic link
        c   char special file
        b   block special file

    file mode   - represent the r,w,x permissions of the file's owner, group, world

                                  ***** PROCESSES *****

ps          - report a snapshot of current processes; many options available
            - two styles for usage options: System V and BSD
    ps      - no options; show processes for that shell
    -u USER - shows processes for the specified username
    -ef     - shows all processes
    -eLf    - shows all threads

top         - displays real-time info about the current processes and threads being
                managed by the linux kernel
            - real-time display options by pressing keys
            - t, m, A, r, k, f, o

job         - a command launched from a terminal window
            - foreground jobs run directly from the shell

jobs        - show jobs/processes launched from a terminal
            - displays all jobs running in the background

COMMAND &   - run job in the background
bg          - send job to background
fg          -
kill        - send signal to programsp
killall     - send signals to multiple processes

Ctrl+Z  - suspend a foreground job
Ctrl+C  - terminate a foreground job

at          - used to execute any non-interactive command at a specified time
sleep       - used to delay or suspend execution for a period of time
    sleep NUMBER [SUFFIX]
    suffixes
        s   - seconds (default)
        m, h, days

at package  - queue, examine or delete jobs for later execution
    at, atq, atrm, batch

cron        - used to schedule and run background shell commands
crontab     - cron table; config file for cron
            - each line represents a job

crontab -e      - manage cronjobs
    30 08 * * * /home/user/scripts/myscript

    minute          (0-59)
    hour            (0-23)
    day of month    (1-31)
    month           (1-12)
    day of week     (0-7)   0 & 7 are denoted as Sunday
    *                match every value


halt
poweroff
reboot
shutdown

pstree  - shows parent-child relationships between processes
        - threads are displayed in curly braces
vmstat  - displays a snapshot of system resource usage
xload   - graphical display of system load over time
tload   - displays system load in terminal

types of processes
interactive - started by the user, either using the CLI or GUI
batch       - automatic processes scheduled from and then disconnected from the terminal
            - these tasks are queued and work on a FIFO basis
daemons     - server processes that run continuously
            - many are launched during system startup and then wait for a user or
                system request indicating that the service is needed
threads     - lightweight processes
            - runs under a main process, sharing memory and other resources
            - scheduled and run by the system on a individual basis
kernel thread - kernel tasks that users neither start nor terminate and have little
                control over

scheduler     - shifts processes on/off the CPU, based on priority

running state - process is either executing or waiting for a time slice
              - reside on a run queue (each CPU has one)
sleep state   - process is waiting on something to happen before resuming
              - reside on a wait queue
zombie state  - a child process is complete but parent has not been asked about it
              - still shows up in the system's list of processes

PID     - Process ID        - unique process ID numeber
PPID    - Parent Process ID - process that started a process
                            - adoptive parent (kthreadd, which is PPID=2)
TID     - Thread ID         - for multi-threaded processes
                            - same as PID for single-threaded processes

RUID    - Real User ID      - indentifies the user that started the process
EUID    - Effective User ID - determines if a process can take a particular action
                            - used as the owner for files created by processes
RGID    - Real Group ID     - indentifies the group that started the process
EGID    - Effective GID     -

niceness value      - the nicer the process, the lower the priority
                    - for normal processes, user programs
    -20 to 19   high to low

real-time priority  - used for real-time processes
                    - larger range and lower value than niceness

load average    - accounts for processes that are:
    actively running
    in the run queue
    sleeping (uninterruptible sleepers)

    - viewed using w, top or uptime
    - a load average of >1.00 per CPU means that processes are competing for the CPU
    - if load average is very high, system may have a problem (non-repsongin process)

                                ***** THE ENVIRONMENT *****

environment - system info, stored in variables, used by shell programs
printenv    - list environment variables (unsorted)
set         - list both shell and env variables, sorted alphabetically
            - used to set shell options
    echo $-     - lists all shell options for the shell

unset       - used to remove a shell variable from the shell environment

export      - makes vars & funcs temp available to any child processes (sub-shells)
            - add to .bashrc to make permenant
            - shows a list of currently exported env variables

data stored by the shell
    - shell variables
    - aliases
    - shell functions

PATH variable   - contains a list of dir's that are searched for when a command is executed
                - separated by colons
                - a null/empty dir indicates the current dir at any time
                    :path1:path2    or    path1::path2

PS1 variable    - Prompt Statement
                - used to customize the terminal's prompt string

                              ***** PACKAGE MANAGEMENT *****

high-level package tool     - perform metadata searching and dependency resolution
                            - apt, apt-get, aptitude
                            - yum, dnf

low-level package tools     - no dependency resolution is performed
                            - dpkg, rpm

apt-get update                  - update repository info
apt-get upgrade                 - install updates
apt-cache search SEARCHTERM     - seach repository for SEARCHTERM
apt-get install PACKAGE_NAME
apt-get remove PACKAGE_NAME
apt-cache show PACKAGE_NAME     - display info about an installed package

yum update                      - update repository info
yum search SEARCHTERM           - seach repository for SEARCHTERM
yum install PACKAGE_NAME
yum erase PACKAGE_NAME
yum info PACKAGE_NAME           - display info about an installed package

dpkg
    -l              - list all installed packages
    -i              - install package
    -s              - package status
    -S FILE_NAME    - what package installed this file

rpm
    -U              - update PACKAGE_FILE
    -qa             - list all installed packages
    -q              - package status
    -qf FILE_NAME   - what package installed this file

                                ***** STORAGE MEDIA *****

mount           - display list of currently mounted filesystems
umount
fsck            - check and repair filesystems
fdisk           - modify a disk's partition table
mkfs            - create filesystems (formats partitions)
dd              - copies blocks of data (data definition)
    dd if=INPUT_FILE of=OUTPUT_FILE
    dd if=/dev/sda of=/dev/sdb                      -> copy HDD
    dd if=/dev/sdb of=flashDrive.bak
    dd if=/dev/sda of=sda.mbr bs=512 count=1        -> make a backup of the MBR

genisoimage     - create an ISO file
wodim           - used to write an ISO to optical dev
md5sum          - generate or check checksums

                                  ***** NETWORKING *****

hostname    - display a system's hostmame
host        - DNS lookup command

nmtui       - Network Manager TUI
mncli       - command line interface for Network Manager
ifconfig    - configure a network interface
            - part of the net-tools package
ip          - display/manipulate routing, devices, policy routing and tunnels
            - newer than ifconfig and has more capabilities,
                but is harder to read

route           - show/manipulate the IP routing table
ip route        - view or change the IP routing table to add, delete or modify specific
                    static routes to specific hosts or networks

tracetroute     - inspects the route by which packets travel from source to destination

ping            - sends an IMCP ECHO_REQUEST to network hosts
                - checks if a machine can receive or send data; online and responding

ethtool     - queries network interfaces and can set various parameters
netstat     - display all active connections and routing tables
            - useful for monitoring performance and troubleshooting
nmap        - scans open ports on a network
            - used for security analysis
tcpdump     - dumps network traffic for analysis
iptraf      - monitors network traffic in text mode
mtr         - combination of ping and traceroute\
dig         - tests DNS workingg
            - replacement for host and nslookup
ftp     -
    - sftp, ncftp, yafc
wget    - network downloader
curl    -
ssh     - secure communication with remote authentication and encryption tunnel
        - cryptographic network protocol used for secure data comms and administration

scp     - secure copy to move fils between two network hosts
sftp    - secure ftp; does not require ftp server, uses ssh server
        - does not work with anon FTP credentials
PuTTY   - ssh client for Windows

                              ***** SEARCHING FOR FILES *****

locate  - find files by name
updatedb    - updates the database used by locate

find    - searches a location for files, with results narrowed by:
            - options
            - tests
            - actions
            - logical operators (and, or, not)

find location tests options criteria_to_match ACTIONS_to_perform_on_results

find examples
find ~ -type f -name ".*"   - search $HOME for all hidden files
find .                      - search current working dir
find . -iname "*.html"      - search for all ".html" files, ignoring case
find . -not -iname "*.php"  - search for files that are NOT ".php" files
find . -perm /a=x           - search for executables
find . -executable

find    - search for files
        - type tests for find -type
            b   - block special dev file
            c   - char special dev file
            d   - dir
            f   - file
            l   - symbolic link

xargs   - takes stdin and converts to an argument list be executed by another command

touch
stat    - display file or system status

                             ***** ARCHIVING AND BACKUP *****

data compression    - removing redundant data
run-length encoding -

lossless    - restored version is the exact same as the original, uncompressed version
lossy       - restored version is a clost approximation

gzip    - file compression/expansion tool
        - dir's must be tar'd first
    gzip *          - compress all files in current dir and give them .gz extension
    gzip -r dir     - recursively compress all files and dir

gunzip  == gzip -d
bunzip2 == bzip2 -d

zcat    - view the contents of the expanded file; same as "gunzip -c FILENAME"
zless   - view the contents of a compressed file with less
zgrep   - search inside of a compressed file
zdiff   - compare two compressed files

bzip2   - block sorting file compressor; slower, but better compression
    bzcat, bzless, bzgrep

xz      - most space-efficient compression utility in Linux
        - used to store archives of the linux kernel
    xzcat, xzless

tar     - tape archiving tool
        - bunding files into a single large file
        - extracted tar files take ownership of the user restoring the file
    tar xvf myDir.tar myDir             -> extract
    tar czvf myDir.tar.gz myDir         -> create a gzip'd tarball
    tar cjvf myDir.tar.bz myDir         -> create a bzip2'd tarball
    tar cJvf myDir.tar.xz myDir         -> create an xz'd tarball
    tar tzvf FILENAME | head            -> examine contents of a tar file

    - pg 266 (advanced usage)

zip     - often required to examine and decompress archives from other operating systems

rsync   - remote file and dir sync
        - remote usage and ssh
    rsync sourceFile destinationFile
    rsync -r DIR target:path
    rysnc -dry-run
    rsync --progress -avrxH --delete sourceDir destDir

                              ***** REGULAR EXPRESSIONS *****

regular expression  - symbolic notation used to identify patterns in text

grep    - Global Regular Expression Print
        - searches text files for the occurrnce of text matching a specified regular
            expression and outputs any line containing a match to stdout
grep options
    -i      - ignore case
    -v      - invert match (print the lines that do NOT contain a match
    -c      - count; print the number of matching lines
    -l      - list the name of each file that contains a match
    -L      - inverse of -l option; print the files that do not contain a match
    -n      - display the line number of the file where the match occurs
    -h      - suppress the output of filenames for multi-file searches

literal char    - char that match themselves; as opposed to metacharacters

metacharacters are:  . ^ $ [ ] { } - ? * + ( ) | \
    - many metachars have meaning to the shell when expansion is performed
        and require quoting to prevent shell expansion

    .   - any char
    ^   - anchor; the regex matches only if it's found at the beginning of the line
    $   - anchor; the regex matches only if it's found at the end of the line
    ^$  - will match blank line
    []  - bracket expression; will match a single char from a set of chars
        - metachar lose their special meaning when placed inside of brackets

        2 cases where metachars gain different meanings inside of brackets
            ^   - indicates negation; chars inside brackets must NOT be present
                - only invokes negation if it is the first char in the brackets,
                    otherwise, it becomes an ordinary char in the set
            -   - indicates a range
                - when in the first position, it IS included in the bracket expression
    |   - alternation; allows a match to occur from a set of expressions
        - allows a match from a set of strings or other regular expressions
    ?   - match an element zero or one time
        - the preceding element optional
    *   - match an element zero or more times
        - the preceding element optional
    +   - match an element one or more times
        - the preceding element is required at least one time
    {}  - match an element a min/max number of times
        {n}     - match the preceding element if it occurs exactly n times
        {n,m}   - match if element occurs at least n times but no more than m times
        {n,}    - match if element occurs n or more times
        {,m}    - match if element occurs no more than m times

POSIX basic vs. extended regular expressions
    BRE     - recognizethe following metacha                    -->  ^ $ . [ ] *
            - all other chars are considered literals

    ERE     - adds these metachars (and their assoc. functions) -->  ( ) { } + |

    in BRE, the metachars from ERE are treated as metachars if they are escaped
    in ERE, the same metachars are treated as literals if they are escaped

regex with grep vs find
    grep - prints a line when the line contains a string that matches an expression
    find - requires that the pathname EXACTLY MATCH the regex

grep examples
    grep -i '^..j.r$' file.txt  - dictionary search finds 'major'
    grep -h '^[A-Z]' file.txt   - find all matches starting with an uppercase letter
    grep -h '^[A-Za-z0-9]'      - find all matches starting with a letter or number

    grep -E '^\(?[0-9]{3}\)? [0-9]{3}-[0-9]{4}$'    - phone #, parens are optional
    grep -E 'AAA|BBB'           - alternation; match 'AAA' or 'BBB'
    grep -E '^(bz|gz|zip)'      - match files that start with either bz, gz, or zip

find . -regex '.*[^-_./0-9a-zA-Z].*'    - find files that DO NOT contain these chars
    - use '.*' at the beginning and end to match zero or more instances of any char

locate --regexp     (BRE)
locate --regex      (ERE)

vim     - supports BRE out of the box; poss. enable with 'set extended'(?)

grep -E
egrep       - search stdout and inside of files using extended regular expressions
zgrep -E    - search possibly compressed files

find programs that use regex by searching the man pages
    cd /usr/share/man/man1
    zgrep -El 'regex|regular expression' *.gz

subexpression   - part of a regex designated with parentheses
back-references - regex commands which refer to subexpressions
                     in either the search or the replacement pattern
                - multiple subexpressions are referred by the order they occur

sed -E -n '/^(.)o\1$/p' /usr/share/dict/words
        - finds "bob, mom, sos, wow", etc.
sed -E -n '/^(.)(.)(.)\3\2\1$/p' /usr/share/dict/words
        - reverses the order of the first three letters = "redder"

locale  - command to see info about the char set being used
        - lists variables associated with locale

                                ***** TEXT PROCESSING *****

cat     - concatenate and print to the stdout
        - copy stdin to stdout
    -n      - show line numbers
    -s      - suppress output of multiple blank lines
    -A      - show non-printing characters
        - Ctrl+D    - end of file

sort    - rearrange lines according to a sort key or a field
        - default sort key is the order of ASCII chars (i.e. alphabetically)
    -n  - sort numerically
    -r  - reverse sort
    -b  - ignore leading blanks
    -k  - sort via a key field (-k=KEYDEF)

ls -l | sort --key=6M --key=7n      - sort field 6 by month, sort field 7 numerically
      | sort -k 6M -k 7n
      | sort -k 3.7nbr  - ignore blank space reverse, numeric sort by 7 char in field 3
dircolors       - color setup for ls command

lsof    - list open files

uniq    - report or omit repeated lines
        - only removes duplicate lines that are adjacent to each other
        - file must be sorted before uniq
cut     - used to extract specific columns from column-based files
        - default separator is the tab char
    -f  - select by field number
    -c  - select by char number
    -d  - specify a field delimiter     -d ':' -f 1
expand      - convert tabs to spaces
unexpand    - convert spaces to tabs

paste   - adds columns of text to a file
        - combine columns/fields from two different files
join    - combines data from multiple files based on a shared key field
        - files must be sorted based on that shared field

comm    - compare two sorted files line by line
        - shows 3 columns: lines that are unique to each file and then lines in common
    -n(1,2,3)   which columns to suppress

diff    - compare files and dirs line by line
diff3   - compare three files
        - one file is used as the reference basis for the other two
    diff MY_FILE REF_FILE YOUR_FILE

cmp     - used to compare binaries

patch   - contains the changes required to update an older version of a file to a new one
        - used to apply a patch to a file
        - accepts output from diff

    diff -Naur FILE_ORIG FILE_NEW > PATCHFILE  -> create a new, unified format PATCHFILE

    patch -p1 < PATCHFILE    - more common
                            - often used to apply changes to an entire dir tree
    patch FILE_ORIG PATCHFILE

diff output
    - range operation range (default format, POSIX compliance & backwards compatible)
    - prescriptive context (how to change the 1st file to make it match the 2nd file)
        - "2,4c2,4" -> lines 2 thru 4 in the 1st file need to be Changed
                        to match lines 2 thru 4 in the 2nd file
        - "2a3"     -> after line 2 in file1, you need to add line 3 from file2
        - "4d3"     -> line 4 from the 1st file should be deleted so both files
                        sync up at line 3

    -c  - context format    -
    -u  - unified format    - more concise, eliminates redundant data

tr      - translate or delete chars (change chars from one alphabet to another)
        - character-based search-and-replace operation
        - operates on stdin and sends output to stdout
    - enumerated list       - ABCDEFGHIJKLMNOPQRSTUVWXYZ
    - character range       - a-z or A-Z
    - POSIX char classes    - [:upper:] or [:lower:]
        tr a-z A-Z
        tr [:lower:] A-Z
        tr [:lower:] [:upper:]
tr -d '\r' < DOS-FILE > UNIX-FILE   - feed DOS-FILE to stdin and send output to stdout
tr -s CHARS                         - squeeze or delete repeating chars

ROT13   - a simple substitution cipher or text obsfucation performed using tr

sed     - stream editor for filtering or transforming text
        - from stdin or files to stdout
        - finds strings based on regex
        - line-oriented

    substitution usage  -> 's / regex pattern / replacement / flags'
        4 types of substitution flags
            g           - global; replace all occurrences in the line
            number      - the nth occurrence of the pattern
            p           - print the original content
            w FILE      - write the results to FILE

    sed -e COMMAND1; -e COMMAND2 FILENAME   - specify multiple editing commands
    sed -f SCRIPT FILENAME                  - specify a scriptgfile containing sed commands
    sed -n                                  - print the modified lines only

    sed -n '/regexp/p'                  -> grep-like
    sed -n 's/regexp/replacement/'      -> search and replace
    sed -n 's/regexp/replacement/g'     -> search and replace all instances

    sed 's/regex/&/g'   - & char represents found regex

awk     - similar to sed, better at tabular data
    field   - columns
    record  - collection of fields, essentially a line in a file

    awk 'COMMANDS' FILE
    awk -f SCRIPTFILE FILE

    awk -F[CHAR]                    - CHAR is the field separator
    awk '{ print $0 }' FILENAME     - print the entire file
    awk '{ print $1 $7 }' FILENAME  - print 1st and 7th field of every line

strings     - used to extract all printable char strings found in a file
            - useful for searching in binary files
            - use grep for text files


aspell  - interactive spell checker
        - creates backup file containing the original text

markup language - descibes the formatting of a finished document
    HTML    - hypertext markup language
    XML     - extensible markup landguage

split       - split a file into pieces
            - default is 1000 lines
csplit      - split a file into pieces based on lines of context
sdiff       - side-by-side merge of file differences

                                ***** FORMATTING OUTPUT *****

nl          - number the lines of a file
fold        - break lines of text (stdin or files) at a specified length
fmt         - a simple optimal text formatter
pr          - prepare text files for printing (margins, headers, footers)
    pr -l 15 -w 65 FILE.TXT     - pages are 65 columns wide and 15 lines long

printf      - program to format and print data  ("print formatted")
            - does NOT accept stdin
    printf "format" arguments
    conversion specifications   - sequences beginning with "%"
        printf "'%s' is a string.\n" foo    --> 'foo' is a string.

printf data type specifiers
    d   - format a number as a signed decimal integer
    f   - format and output a floating-point number
    o   - format an integer as an octal number
    s   - format a string
    x   - format an integer as hexidecimal using lowercase a-f
    X   - format an integer as hexidecimal using uppercase A-F
    %   - print a literal % symbol (i.e. specify %%)

%[flags][width][.precision]conversion_specification

flags
    #   - use the "alternate format" for output, which varies by data type
        o   - output is prefixed with 0
        x   - output is prefixed with 0x
        X   - output is prefixed with 0X
    n   - sets total field width equal to n, including '.precision' and the decimal
    0n  - adds leading zeroes (padding)
    -   - left-align the output                 (default, printf right-aligns output)
    ' ' (space)     - produce a leading space for positive numbers
    +   - add plus sign to positive numbers     (default, printf signs negative numbers)

width       - a number specifying the minimum field width
.precision  - for floating-point numbers, the number of digits after the decimal point
            - for string conversion, the number of chars to output

groff   - typesetting system used to format output from text mixed formatting commands
macro package   - low-level commands condensed into high-level commands

tbl         - format tables for troff
requests    - markup elements for groff

manpages are rendered by groff, using the mandoc macro package
    ... | groff -mandoc -T ascii

PostScript  - a standard page description language (PDL)
    - used to describe the contents of a printed page to a typesetter-like device
    - manages the scaling of fonts and vector graphics
    - a purely text format that is fed to a PostScript interpreter
    - mostly superseded by the PDF format, but is still an intermediate format

enscript    - used to convert a text file to PostScript and other formats
            - supports RTF and HTML

GNU enscript

Ghostscript - a PostScript interpreter; acts as a RIP

ps2pdf
pdf2ps

PDF readers     - also capable of reading PostScript files
    Evince      - most widely used
    Okular      - based on kpd; related to KDF
    GhostView   - early open source PDF reader
    Xpdf

PDF editers
    qpdf        -
    pdftk       - obsolete; depends on an unmaintained package (libgcj)
    ghostscript - gs; widely available and well-maintained, but complex to use

other PDF utilities
    pdfinfo     - extracts info about PDFs
    flpsed      - add data to a PS document
                - useful for filling in forms and notating documents
    pdfmod      - GUI for modifying PDFs (reorder, rotate, remove pages, export images,
                    add keywords, combine docs, etc.)

                                    ***** PRINTING *****

two modern software suites for printing in Linux - CUPS and Ghostscript
CUPS        - Common Unix Printing System
    components of CUPS:
        config files    - provide server settings to the scheduler
            cupsd.conf  - contains most system-wide settings; no printer -specific details
                        - related to security and access, management features
            printer.conf- contains printer-specific settings
                        - file is system-generated after adding printer to the system
        scheduler       - manages print jobs, admin commands, query printer status and
                            manages the flow of data through all CUPS components
        job files       - this is the print queue
                        - files are stored in /var/spool/cups
                        - control files and data files
                        - data files are auto deleted after job is successfully handled
        log files       - files stored in /var/log/cups
                        - used by the scheduler to record activities
                        - files include access, error and page records
        filter          - converts job file formats to printable formats
        drivers         - contain descriptions for current connected/configured printers
                        - usually stored under /etc/cups/ppd
        backend         - helps locate devices connected to the system

print command > scheduler validates command, processes print job, creates job file
    according to settings in config files, records activity in log files
    > job is processed through filter, driver and backend > sent to printer

CUPS webserver - http://localhost:631

command line interfaces to CUPS
lpr     - BSD
lp      - System V
        - the CLI front-end to the lpr utility (that passes input to lpr)

pr      - prepare/convert text files for printing
        - used to adjust text to fit on a specific page size, w/ headers & margins
        - often used with pipelines, as a filter

two historic methods supported by CUPS  ->  they accept files or stdin
    Berkeley/LPD    - lpr
                    - lprm      - terminate prit jobs & remove from queue
    SysV            - uses lp   - slighly more sophisticated
                    - cancel

cups-pdf    - package for printing to PDF


a2ps    - ASCII to PostScript printing program
        - anything to PostScript
        - sends its default output to the default printer rather than stdout

lpstat  - print CUPS status info
    lpstat -a       -> show list of printers known to the system
lpq     - display printer queue
lprm

usage:
lp FILENAME                         -> print a file to default printer
lp -d PRINTER FILENAME              -> print to a specific printer
lp -n NUMBER FILENAME               -> print multiple copies
program | lp echo "STRING" | lp     -> print the output of a program

lpoptions -d PRINTER_NAME           -> set default printer
lpq -a                              -> show the queue status
lpadmin                             -> configure printer queues
lpoptions                           -> used to set system-wide values

lpstat -p -d                        -> get a list of available printers, with status
lpstat -a                           -> check status of all printers, including job numbers
cancel JOB-ID OR lprm JOB-ID        -> cancel a print job
lpmove JOB-ID PRINTET_NAME          -> move print job to another printer

                            ***** COMPILING PROGRAMS *****

compiling   - translating source code into machine code
machine code
    - "add this byte", "point to this memory location", "copy this byte"
    - instructions are expressed in binary
assembly language
    - processed into machine code by an assembler
    - still used for device driver and embedded systems
high-level programming language
    - converted into machine language by a compiler
linking - accessing libraries to make use of routines/common tasks
linker  - forms the connections between the output of the compiler
            and the libraries needed by the compiled program

scripting or interpreted languages
    - not compiled (Perl, Python, PHP, Ruby, etc.)

gcc - GNU C Compiler
source tree     - hierarchy of dir's and files that comprise the source code
configure       - shell scruipt supplied with source tree
                - analyzes the build environment
                - checks that necessary external tools and components are installed
portable        - designed to build on more than one kind of Unix-like system

Makefile    - describes the relationships snd dependencies
            - defines variables that are used later in the file
make        - takes the Makefile as input

-------
examine     - tar tzvf FILENAME         -> list the contents of the archive
unpack      - tar xzvf FILENAME         -> "extract zee vucking files"
./configure
make
sudo make install

which PROGRAM_NAME
man PROGRAM_NAME
-------

export PATH=[DIRECTORY]:"$PATH"     - add to .bashrc
. .bashrc                           - source .bashrc

~/bin               - user scripts
/usr/local/bin      - available to all users
/usr/local/sbin     - sysadmin
/usr/local          - local software (scripts or compiled software)

/bin & /usr/bin     - should contain only files supplied & maintained by Linux distro


variable    - shell treats all of them like strings

here script - COMMAND << TOKEN
    COMMAND     - accepts stdin
    TOKEN       - string used to indicate the end of the embedded text

            cat << _EOF_

                                ***** TOP-DOWN DESIGN *****

top-down design - breakdown large complex tasks into many small, simple tasks

function        - also called subroutines
                - use requires first declaring and then calling the function
shell function  - mini-scripts inside other scripts; can act as autonomous programs

    function FUNCTION_NAME {        <--- older style (?)
        COMMAND
        return
    }
    FUNCTION_NAME () {
        COMMAND
        return
    }
bash script arguments
    $0      - the script name
    $1      - the first argument passed to a script
    $2      - the second argument passed to a script


global variable - maintain their existence throughout the program
local variable  - only accessible within the shell function where they are defined
                - cease to exist once the shell function terminates

stubs       - functions that provide feedback to verify logical flow in a program

                            ***** IF/THEN, ELIF, ELSE *****

--------------------------
if [ EXPRESSION ]     ; then
    STATEMENT
elif [ EXPRESSION ]   ; then
    STATEMENT
else [ EXPRESSION ]
    STATEMENT
fi
--------------------------

[ EXPRESSION ]      - expressions can be a string comparison, numeric comparison,
                        file operators and logical operators

exit status
    - the return value issued to the system when a command terminates
    - value between 0 - 255
    - 0 = indicates successful execution
    - any non-zero value indicates failure

    - can be explicitly set with an exit statement
        - if not explicitly stated, the exit status is that of the last command executed
            in the function body

return  - set the exit status of a function
        - can accept an integer argument to indicate exit status

echo $? - shows exit status of a command execution

test    - evaluate conditional expressions
        - traditional and POSIX compliant

[[ ]] and (( ))     - specific to bash, more modern; extended test command

        - all expressions and operators are treated as command argument
            and some char need to be escaped    <, >, (, )  (special meaning to bash)

test EXPRESSION or [ EXPRESSION ]
    - returns an exit status of 0 when the expression true
    - returns an exit status of 1 when the expression false

[[ EXPRESSION ]]        - useful for evaluating file and pathnames
                        - compund command
            =~          - regex match operator
            ==          - supports pattern matching the same way a pathname expansion

(( EXPRESSION ))        - used to perform arithmetic tests
                        - results in true if the evaluation is non-zero

unary operator      -
                    - often used to examine the status of a file

binary operator     - requires a value on each side
string operator
integer operator

test File Expressions   - expressions used to evaluate the status of files

    -b          - file exists and is a block special device
    -c          - file exists and is a character special device
    -d          - file exists and is a dir
    -e          - file exists
    -f          - file exists and is a regular file
    -g          - file has its set-group-id bit set
    -G          - file is owned by the current effective group id
    -k          - file has its "sticky" bit set
    -h          - file exists and is a symbolic Link
    -L          - file exists and is a symbolic Link
    -O          - file is owned by the current effective user id
    -p          - file is a named Pipe
    -r          - file exists and is readable
    -S          - file exists and is a Socket
    -s          - file exists and size greater than zero
    -t [FD]     - True if FD is opened on a terminal.  If FD is omitted,
                    it defaults to stdout
                - used to test if input is coming from a user or an automated script
    -u file     - file exists and has its set-user-id bit set
    -w file     - file exists and is writable
    -x file     - file exists and is executable

    -b                  - file exists and is a block device
    -d                  - file exists amd is a dir
    -e                  - file exists
    -f                  - file exists and is a regular file
    file1 -ef file2     - file1 and file2 have the same device & inode numbers
                        - hard linked
    file1 -nt file2     - file1 is newer than file2
    file1 -ot file2     - file1 is older than file2

test String Expressions - expressions used to evaluate strings
    EXPRESSION          IS TRUE IF...
    string              - string is not null
    -n string           - the length of string is > zero;   var is not empty
    -z string           - the length of string is zero;     var is empty
    string1 = string2   - string1 and string2 are equal
    string1 == string2  - supported by bash, but not POSIX compliant
    string1 =~ regex    - returns true if string1 is matched by regex
    string1 != string2  - strings are not equal
        > and <         - compares sorting order
                        - must be in quotes, otherwise redirection occurs

test Integer Expressions
    -eq             - equal to
    -ne             - not equal to
    -le             - less than or equal to
    -lt             - less than
    -ge             - greater than or equal to
    -gt             - greater than

compound logical operators

Operation       test        [[ ]] and (( ))
   AND           -a                &&
    OR           -o                ||
   NOT            !                 !

negation operator   - reverses the outcome of an expression
    ! [[ ... ]]     - returns true if expression is false
                    - returns false if expression is true

control operators   - alternate method of branching using logical operators
    COMMAND1 && COMMAND2    - COMMAND2 is only executed if COMMAND1 is successful
    COMMAND1 || COMMAND2    - COMMAND2 is only executed if COMMAND1 is unsuccessful

                            ***** READING KEYBOARD INPUT *****

read        - used to read a single line of standard input,
                from either keyboard input or a line of data using redirection
            - assigns fields from stdin to specified variables
    echo -n     - suppresses the trailing new line on output
    printf      - when to use this (?)

    read VARIABLE_01 VARIABLE_02

    REPLY   - if no variables are declared, a shell variable $REPLY will be
                assigned all of the input
read options
    -a          - array
    -d CHAR     - delimiter
    -e          - use Readline to handle input
                - permits input editing in the same manner as the command line
    -i STRING   - use STRING as a default reply if ENTER is pressed (initial text)
    -n NUMBER   - read NUMBER chars of input rather than an entire line
    -p PROMPT   - display a prompt for input using the string PROMPT
    -r          - raw mode (ignores backslash chars as escape)
    -s          - silent mode (does not display char as they are typed - i.e. passwords)
    -t SECONDS  - timeout after SECONDS; returns a non-zero exit status
    -u fd       - input from file descriptor fd, rather than stdin

IFS     - internal field separator
        - shell variable that controls how input is split by read command
        - default value

<<<     - here string
        - short here document consisting of a single string/line
        - used to feed a line of data from a file to the read command
    - you cannot pipe input to the read command
    (echo "foo" | read)  <-- NO!!!
        - pipelines create subshells (copies of the shell and its environment) that
            are used to execute the command in the pipeline
        - a subshell can never alter the env of its parent process because
            the subshell and its environment are destroyed
        - the read command assigns variables, which then become part of the env

                            ***** WHILE / UNTIL LOOPS *****

while loop  - looping continues while the condition is true (exit status is zero)
            - looping continues until the condition is false

----------------------
while [[ CONDITIONAL ]];         while 'Exit status: 0"
    do COMMANDS                     do COMMANDS
done                            done
----------------------

break       - immediately terminates a loop
            - program control resumes with the next statement
continue    - causes the remainder of the loop to be skipped
            - program control resumes with the next iteration of the loop

until       - looping continues until the condition is true (exit status is zero)
            - looping continues while the condition is false
            - the opposite of a while loop

                                ***** CASE COMMAND *****

case        - multiple-choice compound command
            - when word matches one of the patterns, commands are executed
    ;;      - do not attempt any other matches
    ;;&     - continue to the next test rather than terminating

----------------------
    case word in
        pattern1 commands
        ;;
        pattern2 command
        ;;
        *)
        ;;
    esac
----------------------

patterns    - the same as those used by pathname expansion
            - terminated with a ) char

case pattern examples
    a|A)            matches if the word equals "a" OR "A"
    [[:alpha:]]     matches if the word is a single alphabetic char
    ???)            matches if the word is exactly three chars long
    *.txt)          matches if the word ends with the chars ".txt"
    *)              matches any value of word
                    normally used to catch any possible invalid values



select command for menus

                            ***** SCRIPT TROUBLESHOOTING *****



                                                                pg 454 TLCL
                                                                script troubleshooting

EDX

debug mode  - traces and prefixes each command with the + char
            - displays each command before executing it
            - bash -x ./SCRIPT

    set -x  - turns on debugging
    set +x  - turns off debugging


                            ***** POSITIONAL PARAMETERS *****

positional parameters
        - variables that refer to individual words on the command line
    $0  - variable that contains the pathname of the program being executed
    $#  - variable that contains the number of arguments on the command line

parameter expansion     - used to access positional parameters greater than nine
    ${10}

shift   - command causes all parameters to "move down one"

wrapper - script or shell function that simplifies the invocation of another program

access list of positional params
    $*      - when double-quoted, it expands into a double-quoted string that contains
                all of the positional params
            - produces a one-word result

    $@      - when double-quoted, it expands each positional param into a separate word
                as if it were double-quoted
            - more useful than $*
            - preserves the integrity of each positional param
    ---->   - should always be used

                                    ***** FOR LOOPS *****

for loop    - uses for compound command
            - has two forms:
                - traditional shell form
                - C language form
-----------------------------
for i in [arguments]; do
    commands
done
-----------------------------
    variable    - variable to be incremented
    words       - optional list of items that will be sequentially assigned to variable
                - can include shell expansion
                - if words are omitted, for defaults to processing the positional params
    commands    - commands to be executed on each iteration of the loop

-----------------------------
for (( exp1; exp2; exp3 )); do
    commands
done
-----------------------------
expression1     - used to initialize the variable to be incremented
expression2     - looping continues as long as condition remains true
expression3     - is carried out at the end of each iteration of the loop

                                    ***** STRINGS *****

- string manipulation expansions can substitute for commands such as sed and cut.

var="foo"
$var        - variable expansion (becomes whatever 'var' contains
${var}bar
${11}       - eleventh positional parameter

parameter expansion: conditionals
echo ${parameter:-word}
    - if parameter is unset/empty, expansion results in the value 'word'

echo ${parameter:=word}
    - if parameter is unset/empty, expansion results in the value 'word' and
        'word' is assigned to parameter

echo ${parameter:?word}
    - if parameter is unset/empty, expansion causes the script to exit with an error
        and the contents of word are sent to stderr

echo ${parameter:+word}
    - if parameter is unset/empty, the expansion results in nothing
    - if parameter is not empty, the value of word is substituted for parameter,
        but the value of parameter is not changed

${!parameter}   - indirect expansion (like a pointer)
${!prefix*}     - expansion returns the names of existing variables with names that
${!prefix@}         begin with 'prefix'
                - both variations perform identically

string length
${#parameter}   - expands into the length of the string contained by parameter
                - normally parameter is a string
                - if parameter is @ or *,
                    expansion results in the number of positional parameters

string extraction
${parameter:offset}
${parameter:offset:length}
    - used to extract a portion of the string contained in parameter
    - extraction begins at offset (number of chars from beginning) and
        ontinues to the end of the string or the length specified

    - if offset is negative, start from the end of the string
        - a space is required to not confuse with ${var:-word} and length != 0
        echo ${foo: -5}

    - if parameter is @, the result of the expansion 'length' positional parameters
        starting at offset

subtring removal with #                 - deletes from the beginning of the string
${parameter#pattern}
${parameter##pattern}
    -expansion removes the leading portion of the string contained in parameter
        and defined by pattern
    - pattern is a wildcard pattern like those used in pathname expansion
    - # removes the shortest match
    - ## removes the longest match

subtring removal with %                 - deletes from the end of the string
${parameter%pattern}
${parameter%%pattern}
    - % removes the shortest match
    - %% removes the longest match

usage:
        var1="abcdef"; echo ${var1#abc}     -> def      -> pattern must match completely
        var1="abcdef"; echo ${var1#*c}      -> def      -> or use wildcards
        var1="abcdef"; echo ${var1#??c}     -> def

        var1="abcdef"; echo ${var1%def}     -> abc      -> pattern must match completely
        var1="abcdef"; echo ${var1%d*}      -> abc      -> or use wildcards
        var1="abcdef"; echo ${var1%d??}     -> abc


search and replace
${parameter/pattern/string}     - replace only first occurrence
${parameter//pattern/string}    - replace all occurrences
${parameter/#pattern/string}    - replace if match occurs at beginning of a string
${parameter/%pattern/string}    - replace if match occurs at end of a string
    - operates on the contents of parameter
    - if text matches pattern, it's replaced with string
    - if "/string" is ommitted, text matched by pattern is deleted

upper/lower case conversion
    - used to normalize user input (convert to standard form)
declare - command used to force variables to always contain the desired format
    declare -u var01
    declare -l var02

    declare -f

case conversion parameter expansions
    - parameter may be any string, variable, or string expression
    - pattern is optional; limits the chars to be converted.  Ex: [A-F]
${parameter,,pattern}   - expand parameter to all lowercase
${parameter,pattern}    - change only the first char to lowercase
${parameter^^pattern}   - expand parameter to all uppercase
${parameter^pattern}    - change only the first char to uppercase


                                    ***** ARITHMETIC *****
                                                                pg 506
                                                                strings and numbers
arithmetic evaluation and expansion
$((expression))         - expression is a valid arithmetic expression
    echo $((5*2))

expr    - deprecated program that evaluates arithmetic expressions
        - replaced by $((expression))
let     - bash built-in thata evaluates arithmetic expressions

bc  - for higher-level math

specifying number bases
number          - numbers without notation default to base 10 (decimal)
0number         - octal (has leading zeros)
0xnumber        - hex
base#number     - number is in base

unary operators      + and -

arithmetic operators    - shell arithmetic operates only on whole numbers
+       - addition
-       - subtraction
*       - mulitplication
/       - division
**      - exponentiation
%       - modulo (remainder)

assignment operators
parameter = value       - simple assignment
parameter += value      - parameter = parameter + value
parameter -+ value      - parameter = parameter - value
parameter *= value      - parameter = parameter * value
parameter /= value      - parameter = parameter / value
parameter %= value      - parameter = parameter % value
parameter++             - post-increment (incremented after the parameter is returned)
parameter--             - post-decrement (decremented after the parameter is returned)
++parameter             - pre-increment (incremented before the parameter is returned)
--parameter             - pre-decrement (decremented before the parameter is returned)

bit operators
~       - bitwise negation      - negate all the bits in a number
<<      - left bitwise shift    - shifts bits in a number to the left
>>      - right bitwise shift   - shifts bits in a number to the right
&       - bitwise AND
|       - bitwise OR
^       - bitwise XOR

for ((i=0;i<8;++i)); do echo $((1<<i)); done

- when used for logical operations, expressions follow the rules of arithmetic logic
    - if exp = non-zero -->     true
    - if exp = zero     -->     false

numeric comparison operators
<=                  -
>=                  -
<                   -
>                   -
==                  -
!=                  -
&&                  - logical AND
||                  - logical OR
expr1?exp2:expr3    - ternary comparison operator
    - if exp1 is non-zero (arithmetic true), then expr2; else expr3


                               ***** MISC SCRIPTING *****

mktemp          - used to create a randomly named temporary file or dir
                - minimum of 3 chars
mktemp XXXX     - create a temp file
mktemp -d XXXX  - create a temp dir

/dev/null       - all data written to this is discarded and
                    write operations never return a failure condition
                - aka bit bucket or black hole

$RANDOM         - env variable derived from the kernel's built-in random number generator
                    or by the OpenSSL library function, which uses FIPS140 algorithm to
                    generate random numbers for encryption

/dev/random     - used where high quality randomness is required
                - relatively slow to provide values
                - dev is blocked and won't generate anything if entropy pool is empty
                - entropy pool is filled by environmental noise (network traffic, mouse, etc.)
/dev/urandom    - faster and suitable (good enough) for most cryptographic purposes
                - more psuedo-random
                - reuses the internal pool




                             ***** SCRIPTING EXAMPLES *****

- for loop through a dir, check if file exists and do something:
    for i in *; do [[ -f $i ]] && echo "$i exists and is a file."; done








